# -*- coding: ANSI_X3.4-1968 -*-
# generated by wxGlade 0.3.5.1 on Wed Nov  2 13:08:58 2005

import wx
from data.Amazon import getAmazonInfoByString
import dirctrl

# begin wxGlade: dependencies
# end wxGlade

class CoverGrabberFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: CoverGrabberFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_main = wx.Panel(self, -1)
        self.panel_results = wx.Panel(self.panel_main, -1)
        self.panel_searchparam = wx.Panel(self.panel_main, -1)
        self.sizer_3_staticbox = wx.StaticBox(self.panel_searchparam, -1, "Search")
        self.frame_statusbar = self.CreateStatusBar(1, wx.ST_SIZEGRIP)
        self.directories = dirctrl.GrabberDirCtrl(self, -1)
        self.checkbox_album = wx.CheckBox(self.panel_searchparam, -1, "Album")
        self.label_album = wx.StaticText(self.panel_searchparam, -1, "")
        self.checkbox_artist = wx.CheckBox(self.panel_searchparam, -1, "Artist")
        self.label_artist = wx.StaticText(self.panel_searchparam, -1, "")
        self.label_1 = wx.StaticText(self.panel_searchparam, -1, "Store:")
        self.choice_store = wx.Choice(self.panel_searchparam, -1, choices=["US", "UK"])
        self.text_ctrl_search = wx.TextCtrl(self.panel_searchparam, -1, "")
        self.button_search = wx.Button(self.panel_searchparam, -1, "Search")
        self.list_box_results = wx.ListBox(self.panel_results, -1, choices=[])
        self.bitmap_cover = wx.StaticBitmap(self.panel_results, -1, wx.NullBitmap, style=wx.RAISED_BORDER)
        self.button_select = wx.Button(self.panel_results, -1, "Select")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, self.__buildSearchString, self.checkbox_album)
        self.Bind(wx.EVT_CHECKBOX, self.__buildSearchString, self.checkbox_artist)
        self.Bind(wx.EVT_TEXT_ENTER, self.searchAmazon, self.text_ctrl_search)
        self.Bind(wx.EVT_BUTTON, self.searchAmazon, self.button_search)
        self.Bind(wx.EVT_LISTBOX, self.displayCover, self.list_box_results)
        self.Bind(wx.EVT_BUTTON, self.selectCover, self.button_select)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: CoverGrabberFrame.__set_properties
        self.SetTitle("Amazon Cover Grabber")
        self.frame_statusbar.SetStatusWidths([-1])
        # statusbar fields
        frame_statusbar_fields = ["OK"]
        for i in range(len(frame_statusbar_fields)):
            self.frame_statusbar.SetStatusText(frame_statusbar_fields[i], i)
        self.directories.SetMinSize((200,50))
        self.checkbox_album.SetValue(1)
        self.checkbox_artist.SetValue(1)
        self.choice_store.SetSelection(0)
        self.text_ctrl_search.SetMinSize((220, 32))
        self.list_box_results.SetMinSize((600, 256))
        self.bitmap_cover.SetMinSize((300, 300))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CoverGrabberFrame.__do_layout
        sizer_1 = wx.FlexGridSizer(1, 2, 0, 0)
        grid_sizer_1 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_5 = wx.FlexGridSizer(3, 1, 0, 0)
        sizer_3 = wx.StaticBoxSizer(self.sizer_3_staticbox, wx.HORIZONTAL)
        grid_sizer_2 = wx.FlexGridSizer(2, 1, 0, 0)
        grid_sizer_4 = wx.FlexGridSizer(1, 4, 0, 0)
        grid_sizer_3 = wx.FlexGridSizer(2, 2, 0, 0)
        sizer_1.Add(self.directories, 1, wx.EXPAND, 0)
        grid_sizer_3.Add(self.checkbox_album, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.label_album, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.checkbox_artist, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.Add(self.label_artist, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_3.AddGrowableCol(1)
        grid_sizer_2.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_4.Add(self.label_1, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_4.Add(self.choice_store, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_4.Add(self.text_ctrl_search, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        grid_sizer_4.Add(self.button_search, 0, wx.ADJUST_MINSIZE, 0)
        grid_sizer_4.AddGrowableCol(2)
        grid_sizer_2.Add(grid_sizer_4, 1, wx.EXPAND, 0)
        grid_sizer_2.AddGrowableCol(0)
        sizer_3.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        self.panel_searchparam.SetAutoLayout(True)
        self.panel_searchparam.SetSizer(sizer_3)
        sizer_3.Fit(self.panel_searchparam)
        sizer_3.SetSizeHints(self.panel_searchparam)
        grid_sizer_1.Add(self.panel_searchparam, 1, wx.EXPAND, 0)
        grid_sizer_5.Add(self.list_box_results, 0, wx.EXPAND|wx.ADJUST_MINSIZE, 0)
        grid_sizer_5.Add(self.bitmap_cover, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ADJUST_MINSIZE, 0)
        grid_sizer_5.Add(self.button_select, 0, wx.ALIGN_RIGHT|wx.ADJUST_MINSIZE, 0)
        self.panel_results.SetAutoLayout(True)
        self.panel_results.SetSizer(grid_sizer_5)
        grid_sizer_5.Fit(self.panel_results)
        grid_sizer_5.SetSizeHints(self.panel_results)
        grid_sizer_5.AddGrowableRow(0)
        grid_sizer_5.AddGrowableCol(0)
        grid_sizer_1.Add(self.panel_results, 1, wx.EXPAND, 0)
        self.panel_main.SetAutoLayout(True)
        self.panel_main.SetSizer(grid_sizer_1)
        grid_sizer_1.Fit(self.panel_main)
        grid_sizer_1.SetSizeHints(self.panel_main)
        grid_sizer_1.AddGrowableRow(1)
        grid_sizer_1.AddGrowableCol(0)
        sizer_1.Add(self.panel_main, 1, wx.EXPAND, 0)
        self.SetAutoLayout(True)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        sizer_1.SetSizeHints(self)
        sizer_1.AddGrowableRow(0)
        sizer_1.AddGrowableCol(1)
        self.Layout()
        self.Centre()
        # end wxGlade

    def searchAmazon(self, event): # wxGlade: CoverGrabberFrame.<event_handler>
        store = ["us", "uk"][self.choice_store.GetSelection()]
        string = self.text_ctrl_search.GetValue()
        self.frame_statusbar.SetStatusText("Searching for %s..." % string)
        results = getAmazonInfoByString(string, store)
        if results:
            self.frame_statusbar.SetStatusText("Got %d result(s)" % len(results[1]))
            self.__populateList(results)
        else:
            self.frame_statusbar.SetStatusText("No results")

    def displayCover(self, event): # wxGlade: CoverGrabberFrame.<event_handler>        
        import urllib
        url = self._results[self.list_box_results.GetSelection()]["image"]
        if url:
            jpg = urllib.urlopen(url)
            img = wx.ImageFromStream(jpg, wx.BITMAP_TYPE_JPEG)
            #TODO:  Resize bitmap_cover
            self.bitmap_cover.SetBitmap(wx.BitmapFromImage(img))

    def selectCover(self, event): # wxGlade: CoverGrabberFrame.<event_handler>
        import urllib, os
        import gnosis.xml.pickle
        self._discmeta.amazonStore = self._store
        selection = self._results[self.list_box_results.GetSelection()]
        self._discmeta.amazonAsin = selection["asin"]
        if selection["image"]:
            jpg = urllib.urlopen(selection["image"]).read()
            f = open(self._coverjpg, "wb")
            f.write(jpg)
            f.close()
        
        os.renames(self._discmetafile, self._discmetafile+".bak")

        f = open(self._discmetafile, "w")
        xml = gnosis.xml.pickle.dumps(self._discmeta)
        f.write(xml)
        f.close()
        self.frame_statusbar.SetStatusText("Saved %s" % self._discmetafile)

    def __populateList(self, results):
        self._store = results[0]
        self._results = results[1]
        self.list_box_results.Clear()
        for result in results[1]:
            name = result["name"]
            if result["image"]:
                name = "[COVER] %s" % name
            self.list_box_results.Append(name)

    def loadMetadata(self, directory):
        import os
        import gnosis.xml.pickle
        self._discmetafile = os.path.join(directory, 'discmetadata.xml')
        try:
            self._coverjpg = os.path.join(directory, 'cover.jpg')
            f = open(self._discmetafile, 'r')
            self._discmeta = gnosis.xml.pickle.loads(f.read())
            f.close()
            
            self.label_artist.SetLabel(self._discmeta.artist)
            self.label_album.SetLabel(self._discmeta.title)
            self.checkbox_album.SetValue(True)
            self.checkbox_artist.SetValue(self._discmeta.artist <> "Various Artists")
            self.__buildSearchString(None)
            self.frame_statusbar.SetStatusText("Loaded %s" % self._discmetafile)
        except:
            self.frame_statusbar.SetStatusText("Couldn't open discmetadata.xml")
            raise

    def __buildSearchString(self, event): # wxGlade: CoverGrabberFrame.<event_handler>
        string = ""
        if self.checkbox_artist.GetValue():
            string = " ".join([string, self._discmeta.artist])
        if self.checkbox_album.GetValue():
            string = " ".join([string, self._discmeta.title])
        self.text_ctrl_search.SetValue(string)

# end of class CoverGrabberFrame


